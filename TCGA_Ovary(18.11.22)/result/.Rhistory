ts_fn <- c(ts_fn, NA)
}
tsi_roc1 <- roc(indepY, as.numeric(predict(md1, indepX, type = "response")))
tsi_acc1 <- ci.coords(tsi_roc1, x="best", input = "threshold", ret=c("accuracy"), best.policy = "omit")
if(!is.na(tsi_acc1)){
tsi_result1 <- ci.coords(tsi_roc1, x="best", input = "threshold", ret=c("tp", "tn", "fp","fn"), best.policy = "omit")
tsi_tp <- c(tsi_tp, tsi_result1[1,2])
tsi_tn <- c(tsi_tn, tsi_result1[2,2])
tsi_fp <- c(tsi_fp, tsi_result1[3,2])
tsi_fn <- c(tsi_fn, tsi_result1[4,2])
}else{
tsi_tp <- c(tsi_tp, NA)
tsi_tn <- c(tsi_tn, NA)
tsi_fp <- c(tsi_fp, NA)
tsi_fn <- c(tsi_fn, NA)
}
method <- c(method, "LASSO")
######## RIDGE WITH ALPHA = 0
cv2 <- cv.glmnet(mdlX, mdlY, family = "binomial", nfold = 10, type.measure = "deviance", paralle = TRUE, alpha = 0)
md2 <- glmnet(mdlX, mdlY, family = "binomial", lambda = cv2$lambda.1se, alpha = 0)
tr_roc2 <- roc(mdlY, as.numeric(predict(md2, mdlX, type = "response")))
tr_acc2 <- ci.coords(tr_roc2, x="best", input = "threshold", ret=c("accuracy"), best.policy = "omit")
if(!is.na(tr_acc2)){
tr_result2 <- ci.coords(tr_roc2, x="best", input = "threshold", ret=c("tp", "tn", "fp","fn"), best.policy = "omit")
tr_tp <- c(tr_tp, tr_result2[1,2])
tr_tn <- c(tr_tn, tr_result2[2,2])
tr_fp <- c(tr_fp, tr_result2[3,2])
tr_fn <- c(tr_fn, tr_result2[4,2])
}else{
tr_tp <- c(tr_tp, NA)
tr_tn <- c(tr_tn, NA)
tr_fp <- c(tr_fp, NA)
tr_fn <- c(tr_fn, NA)
}
ts_roc2 <- roc(newY, as.numeric(predict(md2, newX, type = "response")))
ts_acc2 <- ci.coords(ts_roc2, x="best", input = "threshold", ret=c("accuracy"), best.policy = "omit")
if(!is.na(ts_acc2)){
ts_result2 <- ci.coords(ts_roc2, x="best", input = "threshold", ret=c("tp", "tn", "fp","fn"), best.policy = "omit")
ts_tp <- c(ts_tp, ts_result2[1,2])
ts_tn <- c(ts_tn, ts_result2[2,2])
ts_fp <- c(ts_fp, ts_result2[3,2])
ts_fn <- c(ts_fn, ts_result2[4,2])
}else{
ts_tp <- c(ts_tp, NA)
ts_tn <- c(ts_tn, NA)
ts_fp <- c(ts_fp, NA)
ts_fn <- c(ts_fn, NA)
}
tsi_roc2 <- roc(indepY, as.numeric(predict(md2, indepX, type = "response")))
tsi_acc2 <- ci.coords(tsi_roc2, x="best", input = "threshold", ret=c("accuracy"), best.policy = "omit")
if(!is.na(tsi_acc2)){
tsi_result2 <- ci.coords(tsi_roc2, x="best", input = "threshold", ret=c("tp", "tn", "fp","fn"), best.policy = "omit")
tsi_tp <- c(tsi_tp, tsi_result2[1,2])
tsi_tn <- c(tsi_tn, tsi_result2[2,2])
tsi_fp <- c(tsi_fp, tsi_result2[3,2])
tsi_fn <- c(tsi_fn, tsi_result2[4,2])
}else{
tsi_tp <- c(tsi_tp, NA)
tsi_tn <- c(tsi_tn, NA)
tsi_fp <- c(tsi_fp, NA)
tsi_fn <- c(tsi_fn, NA)
}
method <- c(method, "RIDGE")
######## ELASTIC NET WITH 0 < ALPHA < 1
a <- seq(0.1, 0.9, 0.05)
#hyperparameter
search <- foreach(i = a, .combine = rbind) %dopar% {
cv <- cv.glmnet(mdlX, mdlY, family = "binomial", nfold = 10, type.measure = "deviance", paralle = TRUE, alpha = i)
data.frame(cvm = cv$cvm[cv$lambda == cv$lambda.1se], lambda.1se = cv$lambda.1se, alpha = i)
}
cv3 <- search[search$cvm == min(search$cvm), ]
md3 <- glmnet(mdlX, mdlY, family = "binomial", lambda = cv3$lambda.1se, alpha = cv3$alpha)
tr_roc3 <- roc(mdlY, as.numeric(predict(md3, mdlX, type = "response")))
tr_acc3 <- ci.coords(tr_roc3, x="best", input = "threshold", ret=c("accuracy"), best.policy = "omit")
if(!is.na(tr_acc3)){
tr_result3 <- ci.coords(tr_roc3, x="best", input = "threshold", ret=c("tp", "tn", "fp","fn"), best.policy = "omit")
tr_tp <- c(tr_tp, tr_result3[1,2])
tr_tn <- c(tr_tn, tr_result3[2,2])
tr_fp <- c(tr_fp, tr_result3[3,2])
tr_fn <- c(tr_fn, tr_result3[4,2])
}else{
tr_tp <- c(tr_tp, NA)
tr_tn <- c(tr_tn, NA)
tr_fp <- c(tr_fp, NA)
tr_fn <- c(tr_fn, NA)
}
ts_roc3 <- roc(newY, as.numeric(predict(md3, newX, type = "response")))
ts_acc3 <- ci.coords(ts_roc3, x="best", input = "threshold", ret=c("accuracy"), best.policy = "omit")
if(!is.na(ts_acc3)){
ts_result3 <- ci.coords(ts_roc3, x="best", input = "threshold", ret=c("tp", "tn", "fp","fn"), best.policy = "omit")
ts_tp <- c(ts_tp, ts_result3[1,2])
ts_tn <- c(ts_tn, ts_result3[2,2])
ts_fp <- c(ts_fp, ts_result3[3,2])
ts_fn <- c(ts_fn, ts_result3[4,2])
}else{
ts_tp <- c(ts_tp, NA)
ts_tn <- c(ts_tn, NA)
ts_fp <- c(ts_fp, NA)
ts_fn <- c(ts_fn, NA)
}
tsi_roc3 <- roc(indepY, as.numeric(predict(md3, indepX, type = "response")))
tsi_acc3 <- ci.coords(tsi_roc3, x="best", input = "threshold", ret=c("accuracy"), best.policy = "omit")
if(!is.na(tsi_acc3)){
tsi_result3 <- ci.coords(tsi_roc3, x="best", input = "threshold", ret=c("tp", "tn", "fp","fn"), best.policy = "omit")
tsi_tp <- c(tsi_tp, tsi_result3[1,2])
tsi_tn <- c(tsi_tn, tsi_result3[2,2])
tsi_fp <- c(tsi_fp, tsi_result3[3,2])
tsi_fn <- c(tsi_fn, tsi_result3[4,2])
}else{
tsi_tp <- c(tsi_tp, NA)
tsi_tn <- c(tsi_tn, NA)
tsi_fp <- c(tsi_fp, NA)
tsi_fn <- c(tsi_fn, NA)
}
method <- c(method, "EN")
t <- c(t, rep(type, 3))
f <- c(f, rep(feature, 3))
}
tr_specificity <- tr_tn/(tr_tn+tr_fn)
tr_sencitivity <- tr_tp/(tr_tp+tr_fp)
tr_accuracy <- (tr_tp+tr_tn)/(tr_tp+tr_tn+tr_fp+tr_fn)
ts_specificity <- ts_tn/(ts_tn+ts_fn)
ts_sencitivity <- ts_tp/(ts_tp+ts_fp)
ts_accuracy <- (ts_tp+ts_tn)/(ts_tp+ts_tn+ts_fp+ts_fn)
tsi_specificity <- tsi_tn/(tsi_tn+tsi_fn)
tsi_sencitivity <- tsi_tp/(tsi_tp+tsi_fp)
tsi_accuracy <- (tsi_tp+tsi_tn)/(tsi_tp+tsi_tn+tsi_fp+tsi_fn)
tr_acc_table <- data.frame(type = t, feature = f, method, accuracy = tr_accuracy, specificity = tr_specificity, sensitivity = tr_sencitivity)
tr_output_file <- paste0(output_dir, output_names,"_",type,"_",as.character(feature),"_tr.csv")
write.csv(tr_acc_table, tr_output_file, row.names = FALSE)
ts_acc_table <- data.frame(type = t, feature = f, method, accuracy = ts_accuracy, specificity = ts_specificity, sensitivity = ts_sencitivity)
ts_output_file <- paste0(output_dir, output_names,"_",type,"_",as.character(feature),"_ts.csv")
write.csv(ts_acc_table, ts_output_file, row.names = FALSE)
tsi_acc_table <- data.frame(type = t, feature = f, method, accuracy = tsi_accuracy, specificity = tsi_specificity, sensitivity = tsi_sencitivity)
tsi_output_file <- paste0(output_dir, output_names,"_",type,"_",as.character(feature),"_tsi.csv")
write.csv(tsi_acc_table, tsi_output_file, row.names = FALSE)
print(as.character(num), " csv file written.")
num <- num+1
}
}
method
tr_specificity <- tr_tn/(tr_tn+tr_fn)
tr_sencitivity <- tr_tp/(tr_tp+tr_fp)
tr_accuracy <- (tr_tp+tr_tn)/(tr_tp+tr_tn+tr_fp+tr_fn)
ts_specificity <- ts_tn/(ts_tn+ts_fn)
ts_sencitivity <- ts_tp/(ts_tp+ts_fp)
ts_accuracy <- (ts_tp+ts_tn)/(ts_tp+ts_tn+ts_fp+ts_fn)
tsi_specificity <- tsi_tn/(tsi_tn+tsi_fn)
tsi_sencitivity <- tsi_tp/(tsi_tp+tsi_fp)
tsi_accuracy <- (tsi_tp+tsi_tn)/(tsi_tp+tsi_tn+tsi_fp+tsi_fn)
tr_accuracy
ts_accuracy
tsi_accuracy
a <- integer(0)
a
a==integer(0)
tr <- read.csv("C:\\test\\penalized_regression_tr.csv", header=TRUE)
ts <- read.csv("C:\\test\\penalized_regression_ts_sum.csv", header=TRUE)
boxplot(tr)
boxplot(tr~tr$accuracy)
boxplot(tr$accuracy)
tr
name <- paste(tr$type, tr$feature)
name
boxplot(name~tr$accuracy)
boxplot(name,tr$accuracy)
plot(tr)
plot(tr~tr$accuracy)
plot(x = name, y=tr$accuracy)
tr_ <- data.frame(name, accuracy = tr$accuracy)
plot(tr_, x = name, y=accuracy)
plot(tr_, x = name, y="accuracy")
plot(tr_, x = "name", y="accuracy")
plot(tr_)
boxplot(tr_)
ts_name <- paste(ts$type, ts$feature)
ts_ <- data.frame(name = ts_name, accuracy = ts$accuracy)
plot(ts_)
ts$accuracy
dir = "C:\Git\BDLAB_ML_Library\TCGA_Ovary(18.11.22)"
dir = "C:/Git/BDLAB_ML_Library/TCGA_Ovary(18.11.22)"
setwd(paste0(dir, "result/"))
file_name<-list.files(pattern="sum*", full.names = TRUE)
dir = "C:\\Git\\BDLAB_ML_Library\\TCGA_Ovary(18.11.22)"
setwd(paste0(dir, "result/"))
setwd(paste0(dir, "result\\"))
setwd(paste0(dir, "result"))
/
dir = "C:/Git/BDLAB_ML_Library/TCGA_Ovary(18.11.22)"
setwd(paste0(dir, "result/"))
paste0(dir, "result/")
dir = "C:/Git/BDLAB_ML_Library/TCGA_Ovary(18.11.22)/"
setwd(paste0(dir, "result/"))
file_name<-list.files(pattern="sum*", full.names = TRUE)
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.na(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
file_name<-list.files(pattern="sum*", full.names = TRUE)
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.na(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
View(sum_table)
View(df)
file_name<-list.files(pattern="sum*", full.names = TRUE)
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
file_name<-list.files(pattern="sum*", full.names = TRUE)
df <- read.csv(file_name[3], header=TRUE)
df
df <- df[,-1]
df
write.csv(df, file_name[3], row.names = FALSE, quote = FALSE)
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
file_name<-list.files(pattern="sum*", full.names = TRUE)
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
df <- read.csv(file_name[3], header=TRUE)
df
df <- df[,-1]
df
df$layers <- as.character(df$layers)
df
write.csv(df, file_name[3], row.names = FALSE)
dir = "C:/Git/BDLAB_ML_Library/TCGA_Ovary(18.11.22)/"
setwd(paste0(dir, "result/"))
file_name<-list.files(pattern="sum*", full.names = TRUE)
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-names(df)
}else{
sum_table <- rbind(sum_table, df)
}
}
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-names(df)
}else{
sum_table <- rbind(sum_table, names(df))
}
}
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-names(df)
}else{
sum_table <- rbind(sum_table, names(df))
}
}
View(sum_table)
sum_table <- NULL
for(f in file_name){
df <- read.csv(f, header=TRUE)
names(df)[1] <- "index"
for(t in 1:nrow(df)){
n = paste0("m_",as.character(df$model_numbers[t]),"-",as.character(df$test_index[t]),"_",as.character(df$index[t]))
file.copy(paste0(dir, "models/", n, ".h5"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_tr.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
file.copy(paste0(dir, "predictions/", n, "_ts.csv"), paste0(dir, "best_models/test_", as.character(df$test_index[t]), "/"))
}
if(is.null(sum_table)){
sum_table <-df
}else{
sum_table <- rbind(sum_table, df)
}
}
View(sum_table)
write.csv(sum_table, "all_sum.csv", row.names = FALSE)
#install.packages("ggplot2")
#install.packages("ggpubr")
library("ggplot2")
library("ggpubr")
dir = "C:/Git/BDLAB_ML_Library/TCGA_Ovary(18.11.22)/"
setwd(paste0(dir, "result/"))
df <- read.csv("all_sum.csv")
Test_accuracy <- df$Test_accuracy
Test_accuracy <- df$test_accuracy
Test_accuracy <- df$ts_accuracy
Type <- df$model_numbers
Type
plot_col <- rainbow(5, s = 1, v = 1, start = 0, end = max(1,5 - 1)/5, alpha = 0.4)
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
install.packages("ggplot2")
install.packages("ggpubr")
install.packages("ggplot2")
install.packages("ggpubr")
library("ggplot2")
library("ggpubr")
plot_col <- rainbow(5, s = 1, v = 1, start = 0, end = max(1,5 - 1)/5, alpha = 0.4)
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
#install.packages("ggplot2")
install.packages("ggpubr")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("ggpubr")
dir = "C:/Git/BDLAB_ML_Library/TCGA_Ovary(18.11.22)/"
setwd(paste0(dir, "result/"))
df <- read.csv("all_sum.csv")
Test_accuracy <- df$ts_accuracy
Type <- df$model_numbers
plot_col <- rainbow(5, s = 1, v = 1, start = 0, end = max(1,5 - 1)/5, alpha = 0.4)
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
plot_col <- rainbow(6, s = 1, v = 1, start = 0, end = max(1,6 - 1)/6, alpha = 0.4)
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
{
hist(Test_accuracy, freq=FALSE, breaks=100, main="Histrogram of Test Acuuracy (Cross-Validation)")
lines(density(Test_accuracy), col="blue", lwd=3)
}
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
#stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
x
Type
Test_accuracy
Type
Type <- as.factor(df$model_numbers)
plot_col <- rainbow(6, s = 1, v = 1, start = 0, end = max(1,6 - 1)/6, alpha = 0.4)
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
#stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col, xlab("Annot3000_400",
"CV_400",
"Var_400",
"new_Diff_400",
"Clin",
"SNV_400"
))+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
Type
Type <- factor(df$model_numbers, levels=c(0,1,2,3,4,5), labels=c("Annot3000_400",
"CV_400",
"Var_400",
"new_Diff_400",
"Clin",
"SNV_400"))
Type
#bar plot
ggplot(data=df, aes(y= Test_accuracy, x = Type))+
geom_boxplot(fill = plot_col)+
stat_compare_means(method = "anova")+ # Add global p-value
theme_bw()+
labs(title = "Test Accuracy Cross-Validation", x = "Model Type", y = "Test Accuracy")+
theme(plot.title = element_text(hjust = 0.5))
